service: auto-deal-api
package:
  individually: true
frameworkVersion: '3'

useDotenv: true

custom:
  databaseUrl: ${file(env.json):DATABASE_URL}
  audienceIssuerUrl: ${file(env.json):AUDIENCE_ISSUER_URL}
  audienceClientId: ${file(env.json):AUDIENCE_CLIENT_ID}
  initializePaymentQueueArn: ${file(env.json):INITIALIZE_PAYMENT_QUEUE_ARN}
  initializePaymentQueueUrl: ${file(env.json):INITIALIZE_PAYMENT_QUEUE_URL}
  dbUsername: ${file(env.json):DB_USERNAME}
  dbPassword: ${file(env.json):DB_PASSWORD}
  dbName: ${file(env.json):DB_NAME}
  documentation: ${file(documentation/openapi/serverless.doc.yml):documentation}

provider:
  name: aws
  ecr:
    images:
      vehicle:
        path: ./vehicle
        platform: linux/arm64
  stage: dev
  region: us-east-1
  runtime: python3.10
  timeout: 30
  deploymentMethod: direct
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - ${self:custom.initializePaymentQueueArn}
  environment:
    DATABASE_URL: ${self:custom.databaseUrl}
    AUDIENCE_ISSUER_URL: ${self:custom.audienceIssuerUrl}
    AUDIENCE_CLIENT_ID: ${self:custom.audienceClientId}
    INITIALIZE_PAYMENT_QUEUE_URL: ${self:custom.initializePaymentQueueUrl}
    INITIALIZE_PAYMENT_QUEUE_ARN: ${self:custom.initializePaymentQueueArn}
    DB_USERNAME: ${self:custom.dbUsername}
    DB_PASSWORD: ${self:custom.dbPassword}
    DB_NAME: ${self:custom.dbName}
  httpApi:
    cors: true
    authorizers:
      autoDealAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: ${self:custom.audienceIssuerUrl}
        audience:
          - ${self:custom.audienceClientId}
  architecture: arm64

functions:
  create_vehicle:
    ${file(resources/functions/create-vehicle.yml)}
  update_vehicle:
    ${file(resources/functions/update-vehicle.yml)}
  get_vehicle:
    ${file(resources/functions/get-vehicle.yml)}
  list_available_vehicles:
    ${file(resources/functions/list-available.yml)}
  list_sold_vehicles:
    ${file(resources/functions/list-sold.yml)}
  initialize_sale:
    ${file(resources/functions/initialize-sale.yml)}
  confirm_sale:
    ${file(resources/functions/confirm-sale.yml)}
  revert_sale:
    ${file(resources/functions/revert-sale.yml)}

plugins:
  - serverless-openapi-documenter

resources:
  Resources:
    #RDS
    Database:
      ${file(resources/rds.yml)}
    #SQS
    SuccessPaymentQueue:
      ${file(resources/success-payment-queue.yml)}
    FailedPaymentQueue:
      ${file(resources/failed-payment-queue.yml)}

configValidationMode: warn
